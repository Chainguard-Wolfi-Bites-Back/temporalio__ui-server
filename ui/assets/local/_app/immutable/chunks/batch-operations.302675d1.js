import{w as l}from"./singletons.d483fa20.js";import{aj as y}from"./index.df672b57.js";import{A as s}from"./workflow-actions.6f88149c.js";import{g as I}from"./auth-user.5642392d.js";import{p as w}from"./persist-store.a4c92c43.js";import{t as T}from"./versions.e4d2062b.js";import{s as f}from"./parse-with-big-int.b2dd742c.js";import{r as c,a as m}from"./route-for-api.39cdf59b.js";import{c as p,d as b}from"./screaming-enums.485ed739.js";import{i as h}from"./version-check.d006b302.js";const k=e=>e.map(t=>t.runId).reduce((t,r,n,u)=>(t+=`RunId="${r}"`,n!==u.length-1&&(t+=" OR "),t),""),j=e=>{const o=I().email;switch(e){case s.Cancel:return{cancellationOperation:{identity:o}};case s.Terminate:return{terminationOperation:{identity:o}};default:return{}}},C=({id:e,runId:o})=>({workflowId:e,runId:o}),i=(e,o)=>{const t={jobId:o.jobId,namespace:o.namespace,reason:o.reason,...j(e)};if(o.workflows)return h(y(T),"1.19")?{...t,executions:o.workflows.map(C)}:{...t,visibilityQuery:k(o.workflows)};if(o.query)return{...t,visibilityQuery:o.query}};async function V(e){const o=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),t=i(s.Cancel,e);await m(o,{options:{method:"POST",body:f(t)},notifyOnError:!1}),a.set({jobId:t.jobId,namespace:t.namespace})}async function _(e){const o=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),t=i(s.Terminate,e);await m(o,{options:{method:"POST",body:f(t)},notifyOnError:!1}),a.set({jobId:t.jobId,namespace:t.namespace})}async function d({namespace:e,jobId:o}){return new Promise((t,r)=>{g({namespace:e,jobId:o}).then(({state:n,completeOperationCount:u})=>{n==="Failed"?r():n!=="Running"?t(u):setTimeout(()=>{try{t(d({namespace:e,jobId:o}))}catch{r()}},5e3)})})}async function g({jobId:e,namespace:o},t=fetch){const r=c("batch-operations",{namespace:o,batchJobId:e}),n=await m(r,{request:t});return P(n)}const P=e=>({...e,operationType:p(e.operationType),state:b(e.state),startTime:e.startTime,closeTime:e.closeTime,totalOperationCount:parseInt((e==null?void 0:e.totalOperationCount)??"0",10),completeOperationCount:parseInt((e==null?void 0:e.completeOperationCount)??"0",10),failureOperationCount:parseInt((e==null?void 0:e.failureOperationCount)??"0",10)});async function N(e,o=fetch){const t=c("batch-operations.list",{namespace:e,batchJobId:""}),r=await m(t,{request:o});return{nextPageToken:r.nextPageToken,operations:r.operationInfo?r.operationInfo.map(R):[]}}const R=e=>({startTime:e.startTime,closeTime:e.closeTime,jobId:e.jobId,state:b(e.state)}),a=l();a.subscribe(async e=>{e&&await d(e).then(()=>a.set(void 0))});const O=w("auto-refresh-batch-operation",!1);export{O as a,_ as b,V as c,g as d,a as i,N as l};
