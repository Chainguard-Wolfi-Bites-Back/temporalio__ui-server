import{w as p}from"./index.1302fd9b.js";import{ac as b}from"./index.6779d4e2.js";import{A as s}from"./workflow-actions.6f88149c.js";import{g as d}from"./auth-user.6f15fe0f.js";import{p as w}from"./persist-store.d8264c86.js";import{t as y}from"./versions.6b1b4529.js";import{s as u}from"./parse-with-big-int.0036a80a.js";import{r as i,a as c}from"./route-for-api.b38ee859.js";import{i as h}from"./version-check.d006b302.js";import{v as I}from"./toaster.ef510498.js";const T=e=>e.map(o=>o.runId).reduce((o,r,n,m)=>(o+=`RunId="${r}"`,n!==m.length-1&&(o+=" OR "),o),""),O=e=>{const t=d().email;switch(e){case s.Cancel:return{cancellationOperation:{identity:t}};case s.Terminate:return{terminationOperation:{identity:t}};default:return{}}},k=({id:e,runId:t})=>({workflowId:e,runId:t}),f=(e,t)=>{const o={jobId:I(),namespace:t.namespace,reason:t.reason,...O(e)};if(t.workflows)return h(b(y),"1.19")?{...o,executions:t.workflows.map(k)}:{...o,visibilityQuery:T(t.workflows)};if(t.query)return{...o,visibilityQuery:t.query}};async function V(e){const t=i("batch-operations",{namespace:e.namespace}),o=f(s.Cancel,e);await c(t,{options:{method:"POST",body:u(o)},notifyOnError:!1}),a.set({jobId:o.jobId,namespace:o.namespace})}async function _(e){const t=i("batch-operations",{namespace:e.namespace}),o=f(s.Terminate,e);await c(t,{options:{method:"POST",body:u(o)},notifyOnError:!1}),a.set({jobId:o.jobId,namespace:o.namespace})}async function l({namespace:e,jobId:t}){return new Promise((o,r)=>{C({namespace:e,jobId:t}).then(({state:n,completeOperationCount:m})=>{n==="Failed"?r():n!=="Running"?o(m):setTimeout(()=>{try{o(l({namespace:e,jobId:t}))}catch{r()}},5e3)})})}async function C({jobId:e,namespace:t},o=fetch){const r=i("batch-operation.describe",{namespace:t}),n=await c(r,{params:{jobId:e},request:o});return g(n)}const g=e=>({...e,startTime:e.startTime,closeTime:e.closeTime,totalOperationCount:parseInt(e.totalOperationCount,10),completeOperationCount:parseInt(e.completeOperationCount,10),failureOperationCount:parseInt(e.failureOperationCount,10)});async function N(e,t=fetch){const o=i("batch-operations",{namespace:e}),r=await c(o,{request:t});return{nextPageToken:r.nextPageToken,operations:r.operationInfo?r.operationInfo.map(P):[]}}const P=e=>({startTime:e.startTime,closeTime:e.closeTime,jobId:e.jobId,state:e.state}),a=p();a.subscribe(async e=>{e&&await l(e).then(()=>a.set(void 0))});const S=w("auto-refresh-batch-operation",!1);export{S as a,_ as b,V as c,C as d,a as i,N as l};
