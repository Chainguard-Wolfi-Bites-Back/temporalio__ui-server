import{w as b}from"./singletons.abb0f0de.js";import{ac as p}from"./index.9b814669.js";import{A as a}from"./workflow-actions.6f88149c.js";import{g as d}from"./auth-user.d1e7784b.js";import{p as h}from"./persist-store.edf6f4fc.js";import{t as I}from"./versions.b13371dc.js";import{s as u}from"./parse-with-big-int.0036a80a.js";import{r as c,a as i}from"./route-for-api.836b79f7.js";import{i as w}from"./version-check.d006b302.js";const y=e=>e.map(o=>o.runId).reduce((o,r,n,m)=>(o+=`RunId="${r}"`,n!==m.length-1&&(o+=" OR "),o),""),T=e=>{const t=d().email;switch(e){case a.Cancel:return{cancellationOperation:{identity:t}};case a.Terminate:return{terminationOperation:{identity:t}};default:return{}}},O=({id:e,runId:t})=>({workflowId:e,runId:t}),f=(e,t)=>{const o={jobId:t.jobId,namespace:t.namespace,reason:t.reason,...T(e)};if(t.workflows)return w(p(I),"1.19")?{...o,executions:t.workflows.map(O)}:{...o,visibilityQuery:y(t.workflows)};if(t.query)return{...o,visibilityQuery:t.query}};async function v(e){const t=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),o=f(a.Cancel,e);await i(t,{options:{method:"POST",body:u(o)},notifyOnError:!1}),s.set({jobId:o.jobId,namespace:o.namespace})}async function E(e){const t=c("batch-operations",{namespace:e.namespace,batchJobId:e.jobId}),o=f(a.Terminate,e);await i(t,{options:{method:"POST",body:u(o)},notifyOnError:!1}),s.set({jobId:o.jobId,namespace:o.namespace})}async function l({namespace:e,jobId:t}){return new Promise((o,r)=>{k({namespace:e,jobId:t}).then(({state:n,completeOperationCount:m})=>{n==="Failed"?r():n!=="Running"?o(m):setTimeout(()=>{try{o(l({namespace:e,jobId:t}))}catch{r()}},5e3)})})}async function k({jobId:e,namespace:t},o=fetch){const r=c("batch-operations",{namespace:t,batchJobId:e}),n=await i(r,{request:o});return C(n)}const C=e=>({...e,startTime:e.startTime,closeTime:e.closeTime,totalOperationCount:parseInt(e.totalOperationCount,10),completeOperationCount:parseInt(e.completeOperationCount,10),failureOperationCount:parseInt(e.failureOperationCount,10)});async function Q(e,t=fetch){const o=c("batch-operations.list",{namespace:e,batchJobId:""}),r=await i(o,{request:t});return{nextPageToken:r.nextPageToken,operations:r.operationInfo?r.operationInfo.map(g):[]}}const g=e=>({startTime:e.startTime,closeTime:e.closeTime,jobId:e.jobId,state:e.state}),s=b();s.subscribe(async e=>{e&&await l(e).then(()=>s.set(void 0))});const V=h("auto-refresh-batch-operation",!1);export{V as a,E as b,v as c,k as d,s as i,Q as l};
