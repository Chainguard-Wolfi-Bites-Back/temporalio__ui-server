import{a as f,b as c}from"./index-a8ee0a5c.js";const a={key:"",value:""},s=(t,e)=>!(e===null||e===void 0||e===""||e==="0s"||t==="type"),p=["baseRunId","continuedExecutionRunId","firstExecutionRunId","newExecutionRunId","newRunId","originalExecutionRunId"],I=t=>{for(const e of p)if(t===e)return!0;return!1},y=t=>t[0].toUpperCase()+t.slice(1),i=(t,e)=>{if(typeof e=="object"){const[r]=Object.keys(e);return{key:t+y(r),value:e[r]}}else return{key:t,value:e.toString()}},l=["failure","input","activityType","parentInitiatedEventId","workflowType","taskQueue"],d=({attributes:t})=>{for(const[e,r]of Object.entries(t))if(s(e,r))return i(e,r)},u=t=>{const e=d(t);for(const[r,n]of Object.entries(t.attributes))for(const o of l)if(r===o&&s(r,n))return i(r,n);return e},m=t=>{const e=c(t);return u(e)},E=t=>t?f(t)?m(t):u(t):a,k=(t,e)=>{const r=t.charCodeAt(e);return r>=65&&r<=90},b=t=>{let e="",r=0;for(;r<t.length;){const n=t[r],o=t[r+1];if(r===0){e+=t[r].toUpperCase(),r++;continue}if(n+o==="Id"){e+=" ID",r+=2;continue}if(k(t,r)){e+=" ",e+=n.toUpperCase(),r++;continue}e+=n,r++}return e};export{s as a,b as f,E as g,I as s};
