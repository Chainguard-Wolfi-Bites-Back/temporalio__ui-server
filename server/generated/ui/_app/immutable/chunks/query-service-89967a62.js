import{r as p,a as f,d as l}from"./route-for-api-74cb0b13.js";import{g as m,c as h}from"./get-encoder-endpoint-28ae794c.js";import{s as d,p as _}from"./parse-with-big-int-561ccb8b.js";const g=t=>{const r=t.indexOf("["),n=t.indexOf("]");return t.slice(r+1,n).split(" ").filter(e=>e!=="__stack_trace").map(e=>e.endsWith(",")?e.slice(0,e.length-1):e)},I=async(t,r)=>(r=await r,{namespace:t,workflowId:r.id,runId:r.runId});async function u({workflow:t,namespace:r,queryType:n},e=fetch,a){t=await t;const c=await I(r,t),s=await p("query",c);return await f(s,{options:{method:"POST",body:d({execution:{workflowId:t.id,runId:t.runId},query:{queryType:n}})},request:e,onError:a,notifyOnError:!1})}async function E(t,r=fetch){return new Promise((n,e)=>{u({...t,queryType:"@@temporal-internal__list"},r,a=>{l(a.body)&&a.body.message.includes("@@temporal-internal__list")?n(g(a.body.message)):e(a)})})}async function T(t,r,n,e=fetch){return u(t,e).then(async a=>{const{queryResult:c}=a!=null?a:{queryResult:{payloads:[]}};let s=c.payloads;try{if(s[0]){const o=m(r),y={...r,codec:{...r==null?void 0:r.codec,endpoint:o}},i=await h({attributes:c,namespace:t.namespace,settings:y,accessToken:n});s=i==null?void 0:i.payloads[0]}return _(s)}catch{return typeof s!="string"?d(s):s}})}async function W(t,r,n){return T({...t,queryType:"__stack_trace"},r,n)}export{T as a,W as b,E as g};
