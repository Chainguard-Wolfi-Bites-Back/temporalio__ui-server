import{r,a as d}from"./route-for-api-a978430e.js";var l,m=new Uint8Array(16);function w(){if(!l&&(l=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto<"u"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!l))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return l(m)}const S=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function v(t){return typeof t=="string"&&S.test(t)}var o=[];for(var h=0;h<256;++h)o.push((h+256).toString(16).substr(1));function x(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,n=(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase();if(!v(n))throw TypeError("Stringified UUID is invalid");return n}function p(t,e,n){t=t||{};var s=t.random||(t.rng||w)();if(s[6]=s[6]&15|64,s[8]=s[8]&63|128,e){n=n||0;for(var u=0;u<16;++u)e[n+u]=s[u];return e}return x(s)}const T=async(t,e=fetch)=>{var f;let n="";const s=a=>{var y,g;return n=(g=(y=a==null?void 0:a.body)==null?void 0:y.message)!=null?g:`Error fetching schedules: ${a.status}: ${a.statusText}`},u=await r("schedules",{namespace:t}),{schedules:i,nextPageToken:c}=(f=await d(u,{params:{},onError:s,request:e}))!=null?f:{schedules:[],nextPageToken:""};return{schedules:i,nextPageToken:String(c),error:n}};async function R(t,e=fetch){const n=await r("schedule",t);return d(n,{request:e})}async function b(t,e=fetch){const n=await r("schedule.delete",t);return d(n,{request:e,options:{method:"DELETE"}})}async function C({namespace:t,body:e}){let n="";const s=c=>{var f,a;return n=(a=(f=c==null?void 0:c.body)==null?void 0:f.message)!=null?a:`Error creating schedule: ${c.status}: ${c.statusText}`},u=await r("schedules",{namespace:t}),{conflictToken:i}=await d(u,{options:{method:"POST",body:JSON.stringify({request_id:p(),...e})},shouldRetry:!1,onError:s});return{conflictToken:i,error:n}}async function P({namespace:t,scheduleId:e,reason:n}){const s={patch:{pause:n}},u=await r("schedule",{namespace:t,scheduleId:e});return await d(u,{options:{method:"PATCH",body:JSON.stringify({...s,request_id:p()})},shouldRetry:!1,onError:i=>console.error(i)})}async function A({namespace:t,scheduleId:e,reason:n}){const s={patch:{unpause:n}},u=await r("schedule",{namespace:t,scheduleId:e});return await d(u,{options:{method:"PATCH",body:JSON.stringify({...s,request_id:p()})},shouldRetry:!1})}export{T as a,C as c,b as d,R as f,P as p,A as u};
