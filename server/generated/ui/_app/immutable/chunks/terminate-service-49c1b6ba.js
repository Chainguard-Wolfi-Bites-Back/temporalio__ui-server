import{s as c}from"./parse-with-big-int-561ccb8b.js";import{r as a,a as s}from"./route-for-api-c97228bc.js";import{v as w}from"./v4-f2cd1a04.js";async function O({workflow:t,namespace:r,reason:o}){const n=await a("workflow.terminate",{namespace:r,workflowId:t.id,runId:t.runId});return await s(n,{options:{method:"POST",body:c({reason:o})},shouldRetry:!1,notifyOnError:!1})}async function k({namespace:t,workflowExecutions:r,reason:o}){const n=await a("workflows.batch.terminate",{namespace:t}),f=r.map(i=>i.runId).reduce((i,d,l,m)=>(i+=`RunId="${d}"`,l!==m.length-1&&(i+=" OR "),i),""),u=w();return await s(n,{options:{method:"POST",body:c({jobId:u,namespace:t,visibilityQuery:f,reason:o,terminationOperation:{}})},shouldRetry:!1,notifyOnError:!1}),u}async function y({namespace:t,jobId:r}){return new Promise((o,n)=>{h({namespace:t,jobId:r}).then(({state:e})=>{e==="Failed"?n():e!=="Running"?o():setTimeout(async()=>{try{o(y({namespace:t,jobId:r}))}catch{n()}},1e3)})})}async function h({jobId:t,namespace:r}){const o=await a("workflows.batch.describe",{namespace:r});return s(o,{params:{jobId:t}})}export{k as b,y as p,O as t};
