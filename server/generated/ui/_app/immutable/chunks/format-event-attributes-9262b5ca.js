import{f as u}from"./format-date-2e95557a.js";import{a as m}from"./index-9319d41b.js";import{c as i}from"./format-camel-case-13aef7c6.js";const d={key:"",value:""},k=new Set(["activityId","attempt","binaryChecksum","identity","parentInitiatedEventId","requestId","scheduledEventId","startedEventId","lastHeartbeatTime","scheduledTime","expirationTime"]),N=t=>k.has(t),a=(t,e)=>!(e===null||e===void 0||e===""||e==="0s"||t==="type"),h=t=>!(t===null||t===void 0||t===""||Array.isArray(t)&&!t.length),F=t=>{var e,r,s;return typeof t=="string"?t:(s=(r=(e=t==null?void 0:t.payloads)!=null?e:t==null?void 0:t.indexedFields)!=null?r:t==null?void 0:t.points)!=null?s:t},p=["baseRunId","continuedExecutionRunId","firstExecutionRunId","newExecutionRunId","newRunId","originalExecutionRunId"],K=t=>{for(const e of p)if(t===e)return!0;return!1},w=["taskQueueName"],L=t=>{for(const e of w)if(t===e)return!0;return!1},y=(t,e)=>{if(typeof e=="object"){const[r]=Object.keys(e);return{key:t+i(r),value:e[r]}}else return{key:t,value:e.toString()}},E=["failure","input","activityType","parentInitiatedEventId","workflowType","taskQueue"],x=({attributes:t})=>{for(const[e,r]of Object.entries(t))if(a(e,r))return y(e,r)},l=t=>{const e=x(t);for(const[r,s]of Object.entries(t.attributes))for(const n of E)if(r===n&&a(r,s))return y(r,s);return e},b=({lastEvent:t})=>l(t),V=t=>t?m(t)?b(t):l(t):d,I=new Set(["header"]),T=new Set(["taskQueue","retryPolicy","parentWorkflowExecution","workflowExecution"]),S=new Set(["maximumAttempts"]),c="Unlimited",j="No Expiration",W=(t,e)=>t===0?j:e,$=(t,e)=>t===0?c:t-e,A=t=>t===0?c:t,D=(t,e)=>t==="maximumAttempts"&&e===0?c:e,O=(t,e)=>{if(T.has(e)&&typeof t[e]=="object"){for(const[r,s]of Object.entries(t[e]))h(s)&&(S.has(r)?t[`${e}${i(r)}`]=D(r,s):t[`${e}${i(r)}`]=s);delete t[e]}},C=(t,{compact:e}={compact:!1})=>{const r={};e&&(r.eventTime=u(t.eventTime));for(const[s,n]of Object.entries(t.attributes)){const o=a(s,n);!I.has(s)&&o&&(r[s]=n),O(r,s)}return r},f=["summary","parent","activity","taskQueue","schedule","retryPolicy","workflow","searchAttributes"],U={activity:{label:"Activity",color:"gray"},parent:{label:"Parent",color:"gray"},retryPolicy:{label:"Retry Policy",color:"gray"},schedule:{label:"Schedule",color:"gray"},searchAttributes:{label:"Search Attributes",color:"gray"},summary:{label:"Summary",color:"gray"},taskQueue:{label:"Task Queue",color:"gray"},workflow:{label:"Workflow",color:"gray"}},Q=(t,e)=>{var r,s;t.category==="activity"&&((r=e==null?void 0:e.activity)==null?void 0:r.length)&&(e.summary=[...e.activity,...e.summary],e.activity=[]),t.category==="activity"&&((s=e==null?void 0:e.workflow)==null?void 0:s.length)&&(e.summary=[...e.summary,...e.workflow],e.workflow=[])},G=t=>{const e=new Set(["summary","searchAttributes"]);for(const[r,s]of Object.entries(t))s.length===1&&!e.has(r)&&(t.summary=[...t.summary,...s],t[r]=[])},q=(t,e)=>{const r={};f.forEach(s=>{s==="summary"?r[s]=Object.keys(e):r[s]=[]});for(const s of Object.keys(e)){const n=f.find(o=>s.includes(o));n&&(r[n]=[s,...r[n]],r.summary=r.summary.filter(o=>o!==s))}return Q(t,r),G(r),r};export{$ as a,L as b,N as c,U as d,C as e,W as f,F as g,q as h,V as i,A as j,K as s};
