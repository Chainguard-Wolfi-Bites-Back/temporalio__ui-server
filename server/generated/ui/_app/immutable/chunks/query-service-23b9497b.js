import{r as p,a as f,d as l}from"./route-for-api-a6afbdc8.js";import{g as m,h,j as _}from"./index-283d3fa1.js";import{s as d,p as g}from"./parse-with-big-int-9f27148a.js";const I=t=>{const a=t.indexOf("["),n=t.indexOf("]");return t.slice(a+1,n).split(" ").filter(e=>e!=="__stack_trace").map(e=>e.endsWith(",")?e.slice(0,e.length-1):e)},T=async(t,a)=>(a=await a,{namespace:t,workflowId:a.id,runId:a.runId});async function y({workflow:t,namespace:a,queryType:n},e=fetch,r){t=await t;const o=await T(a,t),s=await p("query",o);return await f(s,{options:{method:"POST",body:d({execution:{workflowId:t.id,runId:t.runId},query:{queryType:n}})},request:e,onError:r,notifyOnError:!1})}async function q(t,a=fetch){return new Promise((n,e)=>{y({...t,queryType:"@@temporal-internal__list"},a,r=>{l(r.body)&&r.body.message.includes("@@temporal-internal__list")?n(I(r.body.message)):e(r)})})}async function O(t,a,n,e=fetch){return y(t,e).then(async r=>{const{queryResult:o}=r!=null?r:{queryResult:{payloads:[]}};let s=o.payloads;try{if(s[0]){const c=m(a),u={...a,codec:{...a==null?void 0:a.codec,endpoint:c}},i=c?await h({attributes:o,namespace:t.namespace,settings:u,accessToken:n}):await _(o);s=i==null?void 0:i.payloads[0]}return g(s)}catch{return typeof s!="string"?d(s):s}})}async function B(t,a,n){return O({...t,queryType:"__stack_trace"},a,n)}export{O as a,B as b,q as g};
