import{d as p}from"./is-http-4ef54e59.js";import{g as v,c as g,a as y,d as b}from"./get-encoder-endpoint-67862a53.js";import{f as C}from"./format-date-eb94f038.js";import{g as A,f as E}from"./index-7e3f25d2.js";import{g as T}from"./get-event-categorization-2cfb578f.js";import{s as w}from"./simplify-attributes-db1e2585.js";const S=["Unspecified","Scheduled","Open","New","Started","Initiated","Running","Completed","Fired","CancelRequested","TimedOut","Signaled","Canceled","Failed","Terminated"],P=t=>{if(t.includes("RequestCancel"))return"CancelRequested";for(const n of S)if(t.includes(n))return n};async function R({historyEvent:t,namespace:n,settings:e,accessToken:s},{convertWithCodec:a=g,convertWithWebsocket:o=y,decodeAttributes:i=b,encoderEndpoint:d=p}={}){const{key:u,attributes:c}=E(t),r=v(e,d),m={...e,codec:{...e==null?void 0:e.codec,endpoint:r}},f=r?await a({attributes:c,namespace:n,settings:m,accessToken:s}):await o(c),l=i(f);return{type:u,...l}}const q=async({historyEvent:t,namespace:n,settings:e,accessToken:s})=>{const a=String(t.eventId),o=t.eventType,i=C(String(t.eventTime)),d=P(o),u=T(o),c=await R({historyEvent:t,namespace:n,settings:e,accessToken:s}).then(r=>w(r));return{...t,attributes:c,eventType:o,classification:d,category:u,id:a,name:o,timestamp:i}},x=async({response:t,namespace:n,settings:e,accessToken:s})=>{const a=await Promise.all(t.map(i=>q({historyEvent:i,namespace:n,settings:e,accessToken:s}))),o=A(a);return{events:a,eventGroups:o}};export{x as t};
